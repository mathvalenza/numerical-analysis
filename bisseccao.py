import math as mt

def bisect(f, a, b, tol, k):
  
    c = (a+b)/2 # c √© o ponto  m√©dio do intervalo
  
    # aux √© usada na verifica√ß√£o da metade do intervalo
    # que ser√° considerada na pr√≥xima itera√ß√£o
    aux = f(a) * f(c)
    
    ek = (b-a)/a
    
    print ("%.6f" % c ,"| %.6f" % (ek), " | ", k)
    
    if abs(ek) < tol: #condi√ß√£o de parada: E(k) √© menor que a toler√¢ncia
        print ("M√©todo da Bissec√ß√£o finalizado!")
        return c
    elif aux < 0: # se entre os pontos a e c h√° diferenca de sinal das imagens
        return bisect(f, a, c, tol, k+1) # o novo intervalo √© [a,c]
    else: # se f(a) e f(c) tem o mesmo sinal 
        return bisect(f, c, b, tol, k+1) # o novo intervalo √© [c,b]
def fun(x):
# f(x) = 2 + x/2 + sen(x)
	return 2 + x/2 + mt.sin(x)
def g(x):
#ùëì(ùë•) = 1 + ln(ùë• ‚àí 2)sqrt(x)
	return 1 + mt.log(x-2) * mt.sqrt(x)
def h(x):
#ùëì(ùë•) = 2 ‚àí cos(ùë•)e^x
	return 2 - mt.cos(x) * (mt.e**x)
def n(x):
    return x**2 - 3
    
ret = True
while(ret):
  a = float(input("In√≠cio do intervalo: "))
  b = float(input("Fim do intervalo: "))
  aux = fun(a)*fun(b)
  if (aux < 0):
    ret = False
    print ("    X(k)  |    E(k)    |  k")
    print("Raiz aproximada: ", bisect(fun, a, b, 10**-5, 0))
  else:
    print ("Intervalo inv√°lido, tente novamente")






